// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id    Int     @id @default(autoincrement())
  email String  @unique
  name  String  @unique
  password String
  refreshToken String?
  
  // Les parties où le joueur est le joueur 1
  player1Matches Match[] @relation("Player1")

  // Les parties où le joueur est le joueur 2
  player2Matches Match[] @relation("Player2")

  // Les parties où le joueur est le gagnant
  winnerMatches Match[] @relation("Winner")

  // La file d'attente de matchmaking du joueur
  matchmakingQueue MatchmakingQueue?
}

model Match {
  id           Int      @id @default(autoincrement())
  player1Id    Int      // L'ID de joueur 1
  player2Id    Int     // L'ID de joueur 2
  boardState   String   // Représentation de l'état du plateau de jeu
  currentPlayer Int
  winnerId       Int?     // L'ID du joueur gagnant (peut être null si la partie est en cours ou si c'est une égalité)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Clé étrangère pour lier le joueur 1
  player1      User     @relation(name: "Player1", fields: [player1Id], references: [id])

  // Clé étrangère pour lier le joueur 2
  player2      User    @relation(name: "Player2", fields: [player2Id], references: [id])

  // Clé étrangère pour lier le gagnant de la partie
  winner   User?    @relation(name: "Winner", fields: [winnerId], references: [id])
}

model MatchmakingQueue {
  id         Int      @id @default(autoincrement())
  playerId   Int      @unique // L'ID du joueur en attente
  createdAt  DateTime @default(now())

  // Clé étrangère pour lier le joueur en attente
  player     User     @relation(fields: [playerId], references: [id])
}